{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["/* Функції для виконання HTTP-запитів:\n    getImagesByQuery(query). Ця функція повинна приймати один параметр query (пошукове слово, яке є рядком), здійснювати HTTP-запит і повертати значення властивості data з отриманої відповіді.\n*/\n\nimport axios from 'axios';\n\nconst PIXABAY_API_URL = 'https://pixabay.com/api/';\nconst PIXABAY_API_KEY = '50784112-005c51f7743801558c0ea8079';\n\nexport async function getImagesByQuery(query) {\n  const encodedQuery = encodeURIComponent(query);\n\n  try {\n    const response = await axios.get(PIXABAY_API_URL, {\n      params: {\n        key: PIXABAY_API_KEY,\n        q: encodedQuery,\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: true,\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Помилка під час отримання зображень:', error);\n    throw error;\n  }\n}\n","import SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst galleryEl = document.querySelector('.js-gallery');\nconst loaderEl = document.querySelector('.js-loader');\n\nlet lightbox = new SimpleLightbox('.gallery a', {\n  captionsData: 'alt',\n  captionDelay: 250,\n});\n\nexport function createGallery(images) {\n  if (!Array.isArray(images) || images.length === 0) {\n    galleryEl.innerHTML = '';\n    lightbox.refresh();\n    return;\n  }\n\n  const markup = images\n    .map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => {\n        return `<li class=\"gallery-item\">\n          <a class=\"gallery-link\" href=\"${largeImageURL}\">\n            <img class=\"gallery-image\" src=\"${webformatURL}\" alt=\"${tags}\" />\n          </a>\n          <div class=\"info\">\n            <p class=\"info-item\"><b>Likes</b> ${likes}</p>\n            <p class=\"info-item\"><b>Views</b> ${views}</p>\n            <p class=\"info-item\"><b>Comments</b> ${comments}</p>\n            <p class=\"info-item\"><b>Downloads</b> ${downloads}</p>\n          </div>\n        </li>`;\n      }\n    )\n    .join('');\n\n  galleryEl.innerHTML = markup;\n  lightbox.refresh();\n}\n\nexport function clearGallery() {\n  galleryEl.innerHTML = '';\n  lightbox.refresh();\n}\n\nexport function showLoader() {\n  loaderEl.classList.add('is-visible');\n}\n\nexport function hideLoader() {\n  loaderEl.classList.remove('is-visible');\n}\n","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nimport { getImagesByQuery } from './js/pixabay-api.js';\n\nimport {\n  clearGallery,\n  createGallery,\n  showLoader,\n  hideLoader,\n} from './js/render-functions.js';\n\nconst formEl = document.querySelector('.js-form');\nconst inputEl = document.querySelector('input[name=\"search-text\"]');\n\nformEl.addEventListener('submit', async event => {\n  event.preventDefault();\n\n  const inputValue = inputEl.value.trim();\n\n  if (inputValue === '') {\n    iziToast.error({\n      title: 'Error',\n      message: 'Будь ласка, введіть щось для пошуку!',\n      position: 'topRight',\n    });\n    return;\n  }\n\n  clearGallery();\n  showLoader();\n\n  try {\n    const responseData = await getImagesByQuery(inputValue);\n\n    if (responseData.hits.length === 0) {\n      iziToast.info({\n        title: 'No results',\n        message:\n          'Sorry, there are no images matching your search query. Please try again!',\n        position: 'topRight',\n        backgroundColor: '#ef4040',\n        messageColor: '#fff',\n        titleColor: '#fff',\n      });\n    } else {\n      createGallery(responseData.hits);\n    }\n  } catch (error) {\n    iziToast.error({\n      title: 'Error',\n      message: 'Failed to fetch images. Please try again later.',\n      position: 'topRight',\n    });\n    console.error('Помилка під час пошуку зображень:', error);\n  } finally {\n    hideLoader();\n    inputEl.value = '';\n  }\n});\n"],"names":["PIXABAY_API_URL","PIXABAY_API_KEY","getImagesByQuery","query","encodedQuery","axios","error","galleryEl","loaderEl","lightbox","SimpleLightbox","createGallery","images","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","clearGallery","showLoader","hideLoader","formEl","inputEl","event","inputValue","iziToast","responseData"],"mappings":"owBAMA,MAAMA,EAAkB,2BAClBC,EAAkB,qCAEjB,eAAeC,EAAiBC,EAAO,CAC5C,MAAMC,EAAe,mBAAmBD,CAAK,EAE7C,GAAI,CAWF,OAViB,MAAME,EAAM,IAAIL,EAAiB,CAChD,OAAQ,CACN,IAAKC,EACL,EAAGG,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EACb,CACP,CAAK,GAEe,IACjB,OAAQE,EAAO,CACd,cAAQ,MAAM,uCAAwCA,CAAK,EACrDA,CACP,CACH,CCzBA,MAAMC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAW,SAAS,cAAc,YAAY,EAEpD,IAAIC,EAAW,IAAIC,EAAe,aAAc,CAC9C,aAAc,MACd,aAAc,GAChB,CAAC,EAEM,SAASC,EAAcC,EAAQ,CACpC,GAAI,CAAC,MAAM,QAAQA,CAAM,GAAKA,EAAO,SAAW,EAAG,CACjDL,EAAU,UAAY,GACtBE,EAAS,QAAO,EAChB,MACD,CAED,MAAMI,EAASD,EACZ,IACC,CAAC,CACC,aAAAE,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACR,IACe;AAAA,0CAC2BL,CAAa;AAAA,8CACTD,CAAY,UAAUE,CAAI;AAAA;AAAA;AAAA,gDAGxBC,CAAK;AAAA,gDACLC,CAAK;AAAA,mDACFC,CAAQ;AAAA,oDACPC,CAAS;AAAA;AAAA,cAIxD,EACA,KAAK,EAAE,EAEVb,EAAU,UAAYM,EACtBJ,EAAS,QAAO,CAClB,CAEO,SAASY,GAAe,CAC7Bd,EAAU,UAAY,GACtBE,EAAS,QAAO,CAClB,CAEO,SAASa,GAAa,CAC3Bd,EAAS,UAAU,IAAI,YAAY,CACrC,CAEO,SAASe,GAAa,CAC3Bf,EAAS,UAAU,OAAO,YAAY,CACxC,CC/CA,MAAMgB,EAAS,SAAS,cAAc,UAAU,EAC1CC,EAAU,SAAS,cAAc,2BAA2B,EAElED,EAAO,iBAAiB,SAAU,MAAME,GAAS,CAC/CA,EAAM,eAAc,EAEpB,MAAMC,EAAaF,EAAQ,MAAM,KAAI,EAErC,GAAIE,IAAe,GAAI,CACrBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,uCACT,SAAU,UAChB,CAAK,EACD,MACD,CAEDP,IACAC,IAEA,GAAI,CACF,MAAMO,EAAe,MAAM3B,EAAiByB,CAAU,EAElDE,EAAa,KAAK,SAAW,EAC/BD,EAAS,KAAK,CACZ,MAAO,aACP,QACE,2EACF,SAAU,WACV,gBAAiB,UACjB,aAAc,OACd,WAAY,MACpB,CAAO,EAEDjB,EAAckB,EAAa,IAAI,CAElC,OAAQvB,EAAO,CACdsB,EAAS,MAAM,CACb,MAAO,QACP,QAAS,kDACT,SAAU,UAChB,CAAK,EACD,QAAQ,MAAM,oCAAqCtB,CAAK,CAC5D,QAAY,CACRiB,IACAE,EAAQ,MAAQ,EACjB,CACH,CAAC"}